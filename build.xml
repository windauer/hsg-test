<project basedir="." name="HsgTest" default="noop" xmlns:xdb="http://exist-db.org/ant">
	<property file="build.properties" />
	<property file="test.properties" />
	
	<!-- project directories -->
	
	<property name="libs" value="${basedir}/lib" />
	<property name="binaries" value="${basedir}/bin" />
	<property name="java_src" value="${basedir}/src/main/java" />
	<property name="test_java_src" value="${basedir}/src/test/java" />
	<property name="generated_java_src" value="${basedir}/src/generated-tests/java" />
	<property name="build" value="${basedir}/build" />
	<property name="main_classes" value="${build}/main/classes" />
	<property name="test_classes" value="${build}/test/classes" />
	<property name="test_reports" value="${basedir}/build/doc/test"/>
	<property name="junit_reports" value="${basedir}/build/doc/junit"/>
	<property name="jmeter_reports" value="${basedir}/build/doc/jmeter"/>
	<property name="frus-dir" value="${basedir}/../frus/" />

	<available file="${binaries}/ivy-${ivy.version}.jar" property="ivy.available" />
	<available file="${binaries}/selenium-server-standalone-${selenium.server.major.version}.${selenium.server.minor.version}.jar" property="selenium.available" />
	<available file="${binaries}/${jmeter.anttask.dist}" property="jmeter.anttask.available" />
	<available file="${binaries}/${jmeter.dist}.zip" property="jmeter.available" />

	<target name="help">
		<echo>hsg-test</echo>
		<echo>"ant setup" downloads all required tools; it should be invoked after the project checkout</echo>
		<echo>"ant generate-frus-tests" generates (or recreates) tests based on FRUS volumes.</echo>
		<echo>"ant compile-tests" builds test classes</echo>
		<echo>"ant test" runs all tests</echo>
		<echo>"ant run-junit-tests" runs only JUnit tests (including Selenium tests)</echo>
		<echo>"ant run-jmeter-tests" runs only JMeter tests</echo>
		<echo>"ant clean" deletes all compiled classes and old test reports, but not generated test sources</echo>
		<echo>"ant clean-generated-tests" deletes generated test sources</echo>
	</target>
	
	<!-- Install tools and dependecies -->

	<target name="prepare">
		<mkdir dir="${binaries}" />
		<mkdir dir="${libs}" />
		<mkdir dir="${build}" />
	</target>

	<target name="setup" description="Download all required tools" depends="prepare,ivy.setup,selenium.setup,jmeter.anttask.setup,jmeter.setup">
	</target>
	
	<target name="ivy.setup" description="Download the Ivy dependency manager" unless="ivy.available">
		<get src="${ivy_url}" dest="${binaries}" />
	</target>

	<target name="ivy.taskdef">
		<path id="ivy.lib.path">
			<fileset dir="${binaries}" includes="ivy*.jar" erroronmissingdir="false" />
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path" />
	</target>

	<target name="ivy.download" depends="prepare,ivy.setup, ivy.taskdef" description="Download eXist JAR files required for deployment" xmlns:ivy="antlib:org.apache.ivy.ant">
		<ivy:retrieve sync="true" pattern="${libs}/[artifact]-[revision](-[classifier]).[ext]" />
	</target>

	<target name="selenium.setup" description="Download the Selenium standalone server" unless="selenium.available">
		<get src="${selenium.server.download.url}" dest="${binaries}" />
	</target>

	<target name="jmeter.anttask.setup" description="Download the jmeter anttask" unless="jmeter.anttask.available">
		<get src="${jmeter.anttask.url}${jmeter.anttask.dist}" dest="${binaries}" />
	</target>

	<target name="jmeter.setup" description="Download the jmeter anttask" unless="jmeter.available">
		<get src="${jmeter.url}" dest="${binaries}" />
		<unzip dest="${binaries}" src="${binaries}/${jmeter.dist}.zip" overwrite="true" />
	</target>

	<!-- Start and stop selenium standalone server -->
	<target name="selenium-start">
		<echo />
		<echo message="************************************************************************************************************" />
		<echo message="Starting seleniumRC on ${selenium.server.host}:${selenium.server.port} via selenium-server-standalone-${selenium.server.major.version}.${selenium.server.minor.version}.jar" />
		<echo message="************************************************************************************************************" />
		<echo />
		<!-- this is a 'known location' for this -->
		<java jar="${binaries}/selenium-server-standalone-${selenium.server.major.version}.${selenium.server.minor.version}.jar" fork="true" spawn="true">
		</java>

		<waitfor maxwait="20" maxwaitunit="second">
			<and>
				<socket server="${selenium.server.host}" port="${selenium.server.port}" />
				<http url="http://${selenium.server.host}:${selenium.server.port}${selenium.server.url}" errorsBeginAt="${selenium.server.errorsBeginAt}" />
			</and>
		</waitfor>
	</target>

	<target name="selenium-stop">
		<echo />
		<echo message="************************************************************************************************************" />
		<echo message="Stopping seleniumRC" />
		<echo message="************************************************************************************************************" />
		<echo />
		<get taskname="selenium-shutdown" src="http://http://${selenium.server.host}:${selenium.server.port}/selenium-server/driver/?cmd=shutDownSeleniumServer" dest="result.txt" ignoreerrors="true" />
		<echo taskname="selenium-shutdown" message="Errors during shutdown are expected" />
	</target>

	<!-- Java compilation -->
	<target name="compile-main" description="build java classes" depends="prepare,ivy.taskdef" xmlns:ivy="antlib:org.apache.ivy.ant">
		<ivy:cachepath pathid="main.classpath" conf="compile" />

		<mkdir dir="${main_classes}" />
		<javac srcdir="src/main/java" destdir="${main_classes}">
			<classpath>
				<path refid="main.classpath" />
			</classpath>
		</javac>
	</target>

	<target name="compile-tests" description="build test java classes; it does not regenerate the tests"
			depends="ivy.taskdef, compile-main" xmlns:ivy="antlib:org.apache.ivy.ant">
		<ivy:cachepath pathid="main.classpath" conf="compile" />

		<mkdir dir="${test_classes}" />
		<javac srcdir="src/test/java" destdir="${test_classes}">
			<classpath>
				<path refid="main.classpath" />
				<path path="${main_classes}" />
			</classpath>
		</javac>
		<javac srcdir="${generated_java_src}" destdir="${test_classes}">
			<classpath>
				<path refid="main.classpath" />
				<path path="${main_classes}" />
			</classpath>
		</javac>
		<!-- copy also resource files -->
		<copy todir="${test_classes}">
		    <fileset dir="${generated_java_src}"
		             includes="**/*.xml,**/*.properties,**/*.txt,**/*.ico" />
		</copy>

		<!-- TODO a seperate task to compile generated tests? -->
	</target>

	<target name="run-junit-tests" description="run unit tests" xmlns:ivy="antlib:org.apache.ivy.ant" depends="ivy.taskdef,compile-tests,selenium.setup">
		<!--<antcall target="selenium-start" />-->

		<mkdir dir="${junit_reports}" />
		<mkdir dir="${test_reports}" />
		<ivy:cachepath pathid="main.classpath" conf="compile" />

		<path id="test.path">
			<path refid="main.classpath" />
			<pathelement location="${test_classes}" />
			<pathelement location="${main_classes}" />
		</path>
		<!-- run junit tests -->
		<junit xmlns:if="ant:if" description="run junit tests" printsummary="on">
			<classpath refid="test.path" />

			<formatter type="xml" />
			<batchtest fork="yes" todir="${junit_reports}">
				<!-- excluding GSTC - generated selenium test cases - because they take too much time -->
				<fileset dir="${test_classes}" includes="**/*.class" excludes="**/GSTC*.class" />
				<fileset if:set="run_all_generated_tests" dir="${test_classes}" includes="**/GSTC*.class" />

			</batchtest>
		</junit>

		<!-- generate junit reports -->
		<junitreport description="generate junit reports" todir="${test_reports}">
			<fileset dir="${junit_reports}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${test_reports}" />
		</junitreport>

		<!--<antcall target="selenium-stop"/>-->
	</target>


	<target name="run-jmeter-tests" description="run jmeter tests" depends="prepare,jmeter.anttask.setup, jmeter.setup">
		<taskdef name="jmeter" classname="org.programmerplanet.ant.taskdefs.jmeter.JMeterTask" classpath="${binaries}/${jmeter.anttask.dist}" />

		<!-- clean up -->
		<delete file="${jmeter_reports}/HSG-Shell.jtl" />

		<jmeter jmeterhome="${binaries}/${jmeter.dist}" resultlog="${jmeter_reports}/HSG-Shell.jtl">
			<!--
            <jvmarg value="-Xincgc"/>
            <jvmarg value="-Xmx128m"/>
            -->
			<!-- SAVE results as xml -->
			<property name="jmeter.save.saveservice.output_format" value="xml" />
			<property name="jmeter.save.saveservice.assertion_results" value="all" />
			<property name="loops" value="${jmeter.loop}"/>
			<property name="threads" value="${jmeter.threads}"/>
			<property name="http.server" value="${jmeter.host}"/>
			<property name="http.port" value="${jmeter.port}"/>
			<property name="http.path" value="${jmeter.path}"/>
			<testplans dir="${basedir}/src/test/jmeter" includes="${jmeter.jmx}"/>
		</jmeter>

		<xslt in="${jmeter_reports}/HSG-Shell.jtl" out="${jmeter_reports}/HSG-Shell.html" style="${binaries}/${jmeter.dist}/extras/jmeter-results-report_21.xsl" />
	</target>

	<target name="test" depends="ivy.download, selenium.setup, compile-tests, run-junit-tests, run-jmeter-tests"
		description="Default target. Runs all existing tests. Does not generate or regenerate tests; use generate-frus-tests to do it." />

	<target name="generate-frus-tests" xmlns:ivy="antlib:org.apache.ivy.ant" depends="ivy.taskdef,compile-main">

		<ivy:cachepath pathid="main.classpath" conf="compile" />

		<!-- generate tests for FRUS volumes  -->
		<java classname="gov.state.history.test_generator.FrusTestGenerator" fork="true" maxmemory="1024m">
			<classpath>
				<path path="${main_classes}" />
				<path refid="main.classpath" />
			</classpath>

			<arg path="${frus-dir}" />
			<arg path="${generated_java_src}" />
		</java>
	</target>

	<target name="clean-generated-tests" depends="prepare">
		<delete>
			<fileset dir="${generated_java_src}">
			</fileset>
		</delete>
	</target>

  <target name="xar" />

	<target name="clean">
		<delete dir="${build}"/>
	</target>

	<!-- Do nothing gets called from hsg-project 'ant all' -->
	<target name="noop" depends="prepare"/>
	
	<!-- Do nothing gets called from hsg-project 'ant build-all' -->
	<target name="xar"/>
</project>
